# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_polyfill', [dirname(__file__)])
        except ImportError:
            import _polyfill
            return _polyfill
        if fp is not None:
            try:
                _mod = imp.load_module('_polyfill', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _polyfill = swig_import_helper()
    del swig_import_helper
else:
    import _polyfill
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _polyfill.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _polyfill.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _polyfill.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _polyfill.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _polyfill.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _polyfill.SwigPyIterator_equal(self, x)

    def copy(self):
        return _polyfill.SwigPyIterator_copy(self)

    def next(self):
        return _polyfill.SwigPyIterator_next(self)

    def __next__(self):
        return _polyfill.SwigPyIterator___next__(self)

    def previous(self):
        return _polyfill.SwigPyIterator_previous(self)

    def advance(self, n):
        return _polyfill.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _polyfill.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _polyfill.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _polyfill.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _polyfill.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _polyfill.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _polyfill.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _polyfill.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _polyfill.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _polyfill.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _polyfill.DoubleVector___bool__(self)

    def __len__(self):
        return _polyfill.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _polyfill.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _polyfill.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _polyfill.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _polyfill.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _polyfill.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _polyfill.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _polyfill.DoubleVector_pop(self)

    def append(self, x):
        return _polyfill.DoubleVector_append(self, x)

    def empty(self):
        return _polyfill.DoubleVector_empty(self)

    def size(self):
        return _polyfill.DoubleVector_size(self)

    def swap(self, v):
        return _polyfill.DoubleVector_swap(self, v)

    def begin(self):
        return _polyfill.DoubleVector_begin(self)

    def end(self):
        return _polyfill.DoubleVector_end(self)

    def rbegin(self):
        return _polyfill.DoubleVector_rbegin(self)

    def rend(self):
        return _polyfill.DoubleVector_rend(self)

    def clear(self):
        return _polyfill.DoubleVector_clear(self)

    def get_allocator(self):
        return _polyfill.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _polyfill.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _polyfill.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _polyfill.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _polyfill.DoubleVector_push_back(self, x)

    def front(self):
        return _polyfill.DoubleVector_front(self)

    def back(self):
        return _polyfill.DoubleVector_back(self)

    def assign(self, n, x):
        return _polyfill.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _polyfill.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _polyfill.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _polyfill.DoubleVector_reserve(self, n)

    def capacity(self):
        return _polyfill.DoubleVector_capacity(self)
    __swig_destroy__ = _polyfill.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _polyfill.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class SpanVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpanVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpanVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _polyfill.SpanVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _polyfill.SpanVector___nonzero__(self)

    def __bool__(self):
        return _polyfill.SpanVector___bool__(self)

    def __len__(self):
        return _polyfill.SpanVector___len__(self)

    def __getslice__(self, i, j):
        return _polyfill.SpanVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _polyfill.SpanVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _polyfill.SpanVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _polyfill.SpanVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _polyfill.SpanVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _polyfill.SpanVector___setitem__(self, *args)

    def pop(self):
        return _polyfill.SpanVector_pop(self)

    def append(self, x):
        return _polyfill.SpanVector_append(self, x)

    def empty(self):
        return _polyfill.SpanVector_empty(self)

    def size(self):
        return _polyfill.SpanVector_size(self)

    def swap(self, v):
        return _polyfill.SpanVector_swap(self, v)

    def begin(self):
        return _polyfill.SpanVector_begin(self)

    def end(self):
        return _polyfill.SpanVector_end(self)

    def rbegin(self):
        return _polyfill.SpanVector_rbegin(self)

    def rend(self):
        return _polyfill.SpanVector_rend(self)

    def clear(self):
        return _polyfill.SpanVector_clear(self)

    def get_allocator(self):
        return _polyfill.SpanVector_get_allocator(self)

    def pop_back(self):
        return _polyfill.SpanVector_pop_back(self)

    def erase(self, *args):
        return _polyfill.SpanVector_erase(self, *args)

    def __init__(self, *args):
        this = _polyfill.new_SpanVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _polyfill.SpanVector_push_back(self, x)

    def front(self):
        return _polyfill.SpanVector_front(self)

    def back(self):
        return _polyfill.SpanVector_back(self)

    def assign(self, n, x):
        return _polyfill.SpanVector_assign(self, n, x)

    def resize(self, *args):
        return _polyfill.SpanVector_resize(self, *args)

    def insert(self, *args):
        return _polyfill.SpanVector_insert(self, *args)

    def reserve(self, n):
        return _polyfill.SpanVector_reserve(self, n)

    def capacity(self):
        return _polyfill.SpanVector_capacity(self)
    __swig_destroy__ = _polyfill.delete_SpanVector
    __del__ = lambda self: None
SpanVector_swigregister = _polyfill.SpanVector_swigregister
SpanVector_swigregister(SpanVector)

class RasterLineVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RasterLineVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RasterLineVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _polyfill.RasterLineVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _polyfill.RasterLineVector___nonzero__(self)

    def __bool__(self):
        return _polyfill.RasterLineVector___bool__(self)

    def __len__(self):
        return _polyfill.RasterLineVector___len__(self)

    def __getslice__(self, i, j):
        return _polyfill.RasterLineVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _polyfill.RasterLineVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _polyfill.RasterLineVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _polyfill.RasterLineVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _polyfill.RasterLineVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _polyfill.RasterLineVector___setitem__(self, *args)

    def pop(self):
        return _polyfill.RasterLineVector_pop(self)

    def append(self, x):
        return _polyfill.RasterLineVector_append(self, x)

    def empty(self):
        return _polyfill.RasterLineVector_empty(self)

    def size(self):
        return _polyfill.RasterLineVector_size(self)

    def swap(self, v):
        return _polyfill.RasterLineVector_swap(self, v)

    def begin(self):
        return _polyfill.RasterLineVector_begin(self)

    def end(self):
        return _polyfill.RasterLineVector_end(self)

    def rbegin(self):
        return _polyfill.RasterLineVector_rbegin(self)

    def rend(self):
        return _polyfill.RasterLineVector_rend(self)

    def clear(self):
        return _polyfill.RasterLineVector_clear(self)

    def get_allocator(self):
        return _polyfill.RasterLineVector_get_allocator(self)

    def pop_back(self):
        return _polyfill.RasterLineVector_pop_back(self)

    def erase(self, *args):
        return _polyfill.RasterLineVector_erase(self, *args)

    def __init__(self, *args):
        this = _polyfill.new_RasterLineVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _polyfill.RasterLineVector_push_back(self, x)

    def front(self):
        return _polyfill.RasterLineVector_front(self)

    def back(self):
        return _polyfill.RasterLineVector_back(self)

    def assign(self, n, x):
        return _polyfill.RasterLineVector_assign(self, n, x)

    def resize(self, *args):
        return _polyfill.RasterLineVector_resize(self, *args)

    def insert(self, *args):
        return _polyfill.RasterLineVector_insert(self, *args)

    def reserve(self, n):
        return _polyfill.RasterLineVector_reserve(self, n)

    def capacity(self):
        return _polyfill.RasterLineVector_capacity(self)
    __swig_destroy__ = _polyfill.delete_RasterLineVector
    __del__ = lambda self: None
RasterLineVector_swigregister = _polyfill.RasterLineVector_swigregister
RasterLineVector_swigregister(RasterLineVector)

class Span(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Span, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Span, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x0"] = _polyfill.Span_x0_set
    __swig_getmethods__["x0"] = _polyfill.Span_x0_get
    if _newclass:
        x0 = _swig_property(_polyfill.Span_x0_get, _polyfill.Span_x0_set)
    __swig_setmethods__["x1"] = _polyfill.Span_x1_set
    __swig_getmethods__["x1"] = _polyfill.Span_x1_get
    if _newclass:
        x1 = _swig_property(_polyfill.Span_x1_get, _polyfill.Span_x1_set)

    def __init__(self):
        this = _polyfill.new_Span()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _polyfill.delete_Span
    __del__ = lambda self: None
Span_swigregister = _polyfill.Span_swigregister
Span_swigregister(Span)

class RasterLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RasterLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RasterLine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["y"] = _polyfill.RasterLine_y_set
    __swig_getmethods__["y"] = _polyfill.RasterLine_y_get
    if _newclass:
        y = _swig_property(_polyfill.RasterLine_y_get, _polyfill.RasterLine_y_set)
    __swig_setmethods__["spans"] = _polyfill.RasterLine_spans_set
    __swig_getmethods__["spans"] = _polyfill.RasterLine_spans_get
    if _newclass:
        spans = _swig_property(_polyfill.RasterLine_spans_get, _polyfill.RasterLine_spans_set)

    def __init__(self, *args):
        this = _polyfill.new_RasterLine(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _polyfill.delete_RasterLine
    __del__ = lambda self: None
RasterLine_swigregister = _polyfill.RasterLine_swigregister
RasterLine_swigregister(RasterLine)


def raster_polygon(xx, yy, dy=1):
    return _polyfill.raster_polygon(xx, yy, dy)
raster_polygon = _polyfill.raster_polygon
# This file is compatible with both classic and new-style classes.


